
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { toast } from 'sonner';

/**
 * Utility function to handle printing the current page
 */
export const printInvoice = (): void => {
  window.print();
};

/**
 * Utility function to create a PDF from the invoice and trigger download
 * This uses jsPDF to create a proper PDF document with enhanced quality
 */
export const downloadInvoice = async (invoiceNumber: string): Promise<void> => {
  // Get the invoice element
  const invoiceElement = document.getElementById('invoice-preview');
  if (!invoiceElement) {
    console.error('Invoice element not found');
    toast.error('Could not generate PDF: Invoice element not found');
    return;
  }

  try {
    // Prepare the element for high-quality capture
    const originalStyles = {
      opacity: invoiceElement.style.opacity,
      transform: invoiceElement.style.transform,
      transition: invoiceElement.style.transition,
      boxShadow: invoiceElement.style.boxShadow,
      width: invoiceElement.style.width,
      margin: invoiceElement.style.margin,
    };
    
    // Enhance for PDF capture
    invoiceElement.style.opacity = '1';
    invoiceElement.style.transform = 'none';
    invoiceElement.style.transition = 'none';
    invoiceElement.style.boxShadow = 'none';
    invoiceElement.style.width = '100%';
    invoiceElement.style.margin = '0';
    
    // Generate canvas with higher quality settings and ensure single page fit
    const canvas = await html2canvas(invoiceElement, {
      scale: 2, // Reduced scale to fit on single page
      useCORS: true,
      logging: false,
      backgroundColor: '#ffffff',
      allowTaint: true,
      windowWidth: invoiceElement.scrollWidth,
      windowHeight: invoiceElement.scrollHeight,
      onclone: (clonedDoc) => {
        // Ensure all elements are properly styled in the cloned document
        const clonedElement = clonedDoc.getElementById('invoice-preview');
        if (clonedElement) {
          // Apply styles to ensure single page printing
          clonedElement.style.pageBreakInside = 'avoid';
          clonedElement.style.printColorAdjust = 'exact';
          
          // Apply font smoothing through setAttribute to bypass TypeScript checking
          clonedElement.setAttribute('style', 
            clonedElement.getAttribute('style') + 
            '; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;'
          );
          
          // Add specific styles to ensure content fits on one page
          const style = document.createElement('style');
          style.innerHTML = `
            #invoice-preview table { page-break-inside: avoid; }
            #invoice-preview * { max-width: 100%; }
          `;
          clonedDoc.head.appendChild(style);
        }
      }
    });
    
    // Calculate PDF dimensions to ensure single page with proper margins
    const imgData = canvas.toDataURL('image/png', 1.0);
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true,
      hotfixes: ['px_scaling'],
    });
    
    // Set document properties
    pdf.setProperties({
      title: `Invoice-${invoiceNumber}`,
      subject: 'Invoice Document',
      creator: 'AI Invoice Generator',
      author: 'AI Transactify',
    });
    
    // Add professional-looking metadata and styling
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    
    // Calculate dimensions to fit on single page
    const imgWidth = 210 - 20; // A4 width - margins
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    // Center the invoice on the page
    const marginX = 10; // 10mm margin on left and right
    const marginY = 10; // 10mm margin on top and bottom
    
    // Add image to PDF with proper positioning to ensure single-page fit
    pdf.addImage(
      imgData, 
      'PNG', 
      marginX, 
      marginY, 
      imgWidth, 
      Math.min(imgHeight, 277) // Ensure it doesn't exceed page height (297mm - margins)
    );
    
    // Add footer
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(
      `Generated by AI Transactify | Invoice #${invoiceNumber}`, 
      imgWidth / 2 + marginX, 
      297 - 5, // Bottom of page with small margin
      { align: 'center' }
    );
    
    // Save the PDF with better naming
    pdf.save(`Invoice-${invoiceNumber}-${new Date().toISOString().slice(0, 10)}.pdf`);
    
    // Restore original styles
    invoiceElement.style.opacity = originalStyles.opacity;
    invoiceElement.style.transform = originalStyles.transform;
    invoiceElement.style.transition = originalStyles.transition;
    invoiceElement.style.boxShadow = originalStyles.boxShadow;
    invoiceElement.style.width = originalStyles.width;
    invoiceElement.style.margin = originalStyles.margin;
    
    toast.success('PDF generated successfully');
  } catch (error) {
    console.error('Error generating PDF:', error);
    toast.error('Failed to generate PDF. Please try again.');
  }
};
